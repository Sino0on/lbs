# Generated by Django 4.2.2 on 2023-07-06 19:15

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('grade', models.IntegerField(blank=True, null=True, verbose_name='Оценка')),
                ('birth_of_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('status', models.CharField(blank=True, choices=[('NICE', 'Nice'), ('BAD', 'Bad')], max_length=255, null=True, verbose_name='Статус')),
                ('type_user', models.CharField(blank=True, choices=[('SENDER', 'Sender'), ('DRIVER', 'Driver'), ('COMPANY', 'Company')], max_length=255, null=True, verbose_name='Тип пользователя')),
                ('phone_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Номер телефона')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('status', models.CharField(choices=[('NICE', 'Nice'), ('BAD', 'Bad')], max_length=255, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Чат',
                'verbose_name_plural': 'Чаты',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('descriptions', models.TextField(verbose_name='Описание')),
                ('status', models.CharField(choices=[('NICE', 'Nice'), ('BAD', 'Bad')], max_length=255, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Компания',
                'verbose_name_plural': 'Компании',
            },
        ),
        migrations.CreateModel(
            name='DeliveryDocs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('document', models.FileField(upload_to='files/delivery/', verbose_name='Документ')),
                ('created_date', models.DateField(verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Документ доставки',
                'verbose_name_plural': 'Документы доставки',
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orders', models.IntegerField(verbose_name='Количество заказов')),
                ('status', models.CharField(choices=[('NICE', 'Nice'), ('BAD', 'Bad')], max_length=255, verbose_name='Статус')),
                ('driver_license', models.FileField(upload_to='files/drivers/', verbose_name='Водительские права')),
                ('qualification', models.FileField(upload_to='files/drivers/', verbose_name='Квалификация')),
                ('medical_sertificate', models.FileField(upload_to='files/drivers/', verbose_name='Медицинское свидетельство')),
                ('employeement', models.FileField(upload_to='files/drivers/', verbose_name='Трудоустройство')),
                ('recomment', models.FileField(upload_to='files/drivers/', verbose_name='Рекомендация')),
            ],
            options={
                'verbose_name': 'Водитель',
                'verbose_name_plural': 'Водители',
            },
        ),
        migrations.CreateModel(
            name='DriverDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(upload_to='', verbose_name='Документ')),
            ],
            options={
                'verbose_name': 'Документ водителя',
                'verbose_name_plural': 'Документы водителя',
            },
        ),
        migrations.CreateModel(
            name='FeedbackImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='media/feedback/', verbose_name='Изображение')),
            ],
            options={
                'verbose_name': 'Изображение отзыва',
                'verbose_name_plural': 'Изображения отзывов',
            },
        ),
        migrations.CreateModel(
            name='MessageDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('documet', models.FileField(upload_to='', verbose_name='Документ')),
            ],
            options={
                'verbose_name': 'Документ сообщения',
                'verbose_name_plural': 'Документы сообщения',
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('km', models.IntegerField(verbose_name='Цена за км')),
                ('insurance', models.IntegerField(verbose_name='Страховка')),
                ('express', models.IntegerField(verbose_name='Срочность')),
            ],
            options={
                'verbose_name': 'Цена',
                'verbose_name_plural': 'Цены',
            },
        ),
        migrations.CreateModel(
            name='PriceSingle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('km', models.IntegerField(verbose_name='Цена за км')),
                ('insurance', models.IntegerField(verbose_name='Страховка')),
                ('express', models.IntegerField(verbose_name='Срочность')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('start_date', models.DateField(verbose_name='Дата начала')),
                ('start_time', models.TimeField(verbose_name='Время начала')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('end_time', models.TimeField(verbose_name='Время окончания')),
                ('weight', models.FloatField(verbose_name='Вес')),
                ('size', models.FloatField(verbose_name='Размер')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('start_place', models.CharField(max_length=255, verbose_name='Место отправления')),
                ('end_place', models.CharField(max_length=255, verbose_name='Место доставки')),
                ('express', models.BooleanField(blank=True, default=False, verbose_name='Срочный')),
                ('distance', models.FloatField(blank=True, null=True, verbose_name='Расстояние')),
                ('type_car', models.CharField(choices=[('BIG', 'Big'), ('SMALL', 'Small')], max_length=255, verbose_name='Тип автомобиля')),
                ('insurance', models.BooleanField(blank=True, default=False, verbose_name='Страховка')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('status', models.CharField(blank=True, choices=[('NICE', 'Nice'), ('BAD', 'Bad')], max_length=255, verbose_name='Статус')),
                ('price', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='app.price', verbose_name='Цена')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('text', models.TextField(verbose_name='Текст')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.chat', verbose_name='Чат')),
                ('documents', models.ManyToManyField(to='app.messagedoc', verbose_name='Документы сообщения')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField(verbose_name='Оценка')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.driver', verbose_name='Водитель')),
                ('image', models.ManyToManyField(to='app.feedbackimage', verbose_name='Изображение')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
            },
        ),
        migrations.AddField(
            model_name='driver',
            name='documents',
            field=models.ManyToManyField(to='app.driverdocument', verbose_name='Документы водителя'),
        ),
        migrations.AddField(
            model_name='driver',
            name='user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='is_driver', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Дата начала')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('status', models.CharField(choices=[('NICE', 'Nice'), ('BAD', 'Bad')], max_length=255, verbose_name='Статус')),
                ('documents', models.ManyToManyField(to='app.deliverydocs', verbose_name='Документы доставки')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.driver', verbose_name='Водитель')),
                ('order', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.order', verbose_name='Заказ')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Доставка',
                'verbose_name_plural': 'Доставки',
            },
        ),
        migrations.CreateModel(
            name='CompanyFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('grade', models.IntegerField(verbose_name='Оценка')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.company', verbose_name='Компания')),
                ('images', models.ManyToManyField(to='app.feedbackimage', verbose_name='Изображения')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Отзыв о компании',
                'verbose_name_plural': 'Отзывы о компаниях',
            },
        ),
        migrations.AddField(
            model_name='company',
            name='drivers',
            field=models.ManyToManyField(to='app.driver', verbose_name='Водители'),
        ),
        migrations.AddField(
            model_name='chat',
            name='driver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.driver', verbose_name='Водитель'),
        ),
        migrations.AddField(
            model_name='chat',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.order', verbose_name='Заказ'),
        ),
        migrations.AddField(
            model_name='chat',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
    ]
